apply plugin: 'java'
apply plugin: 'eclipse'

version = '1.1.0-SNAPSHOT'
// version = 1.1.0

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "$nexusBaseUrl/repositories/releases"
    credentials {
      username nexusUserName
      password nexusPassword
    }
  }
}

buildscript {
  repositories { mavenCentral() }
  dependencies {
//      classpath 'org.ajoberstar:gradle-git:0.6.3'
      classpath 'org.eclipse.jgit:org.eclipse.jgit:3.3.1.201403241930-r'
  }
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile "com.typesafe:config:1.2.0"
    compile 'org.eclipse.jgit:org.eclipse.jgit:3.3.1.201403241930-r'
}

//import org.ajoberstar.gradle.git.tasks.*
//
//task tag(type: GitTag) {
//    tagName = version
//    message = "Release of ${version}"
//}
//
//task status(type: GitStatus) {
//}

task uploadArchives
task uploadDocumentation


import org.eclipse.jgit.api.Git
import org.eclipse.jgit.internal.storage.file.FileRepository
import org.slf4j.Logger
import org.slf4j.LoggerFactory

class ReleasesPluginPlugin implements Plugin<Project> {
    private static final Logger log = LoggerFactory.getLogger(ReleasesPluginPlugin.class)

    enum ReleaseVersion { ALPHA, BETA, RELEASE }

    private Git repo
    private String versionString

    @Override
    void apply(Project project) {
        log.warn("Applying ReleasesPluginPlugin to " + project.name)
        if (!project.tasks.names.containsAll(["clean", "build", "uploadArchives", "uploadDocumentation"])) {
            println "Cannot apply releases-plugin to " + project.name +
                    ": tasks [clean, build, uploadArchives, uploadDocumentation] must all be present"
            return
        }

        def release_task = project.rootProject.tasks.create("release")
        release_task.configure {
            ext.rootProject = project.rootProject
            ext.releaseVersion =
                    project.hasProperty("alpha") ? ReleaseVersion.ALPHA :
                    project.hasProperty("beta") ? ReleaseVersion.BETA :
                    project.hasProperty("release") ? ReleaseVersion.RELEASE :
                    null
            log.info("Release version ${releaseVersion} requested")
            release_task.doLast {
                if (!releaseVersion) {
                    println "What kind of release do you want? Please specify -Palpha, -Pbeta, or -Prelease"
                    return
                }
                doRelease()
            }
        }
    }

    def doRelease() {
        repo = new Git(new FileRepository(rootProject.rootDir))
        ensureCleanRepo()
        gitPullRebase()
        setProjectVersion()
        doUpload project
        gitCommitAndTagReleasedVersion()
        bumpProjectVersion()
        gitCommitNextVersion()
        gitPush()
    }

    def ensureCleanRepo() {
        if (!(repo.status().call().clean)) {
            throw new GradleException("You have outstanding work. Please commit or stash before releasing.")
        }
    }

    def gitPullRebase() {
        try {
            repo.pull().setRebase(true).call()
        } catch (Exception e) {
            throw new GradleException("git pull --rebase failed", e)
        }
    }

    def setProjectVersion() {
        // TODO!
        // this.versionString = sump'n'sump'n'.
    }

    def doUpload() {
        rootProject.task("clean").execute()
        rootProject.task("build").execute()
        rootProject.task("uploadArchives").execute()
        rootProject.task("uploadDocumentation").execute()
    }

    def gitCommitAndTagReleasedVersion(Git repo) {
        def version = "${rootProject.name}-${versionString}"
        try {
            repo.commit().setMessage("Releasing ${version}").call()
            repo.tag().setMessage(version)
        } catch(Exception e) {
            throw new GradleException("git commit or git tag failed", e)
        }
    }

    def bumpProjectVersion() {
        // TODO!
    }

    def gitCommitNextVersion() {

    }
}

apply plugin: ReleasesPluginPlugin